#--------------------------------------------------------------------------#

# E X P O R T S

#--------------------------------------------------------------------------#
# Set architecture flags
export ARCHFLAGS="-arch x86_64"

# Set SublimeText 2 default text editor
export EDITOR='subl -w'

# Make some commands not show up in history
export HISTIGNORE="ls:cd:cd -:pwd:exit:date:* --help"

# Ensure user-installed (homebrew) binaries take precedence
export PATH=~/.rbenv/shims:/usr/local/Cellar:/usr/local/bin:/usr/local/sbin:/usr/local/bin/flake8:/usr/local/bin/git:/usr/bin:/bin:/usr/sbin:/sbin

# Set PATH for Rust language
export PATH="$HOME/.cargo/bin:$PATH"

# Ensure node packages are used globally
export NODE_PATH=/usr/lib/node_modules

# Load .bashrc if it exists
test -f ~/.bashrc && source ~/.bashrc

# Make Tab autocomplete regardless of filename case
set completion-ignore-case on

# List all matches in case multiple possible completions are possible
set show-all-if-ambiguous on

# Make the output of any `ls` command colored by default
export CLICOLOR=1
export LSCOLORS=exfxcxdxbxexexabagacad

### R U B Y
# Ensure rbenv will be used first (définition à vérifier/compléter)
eval "$(rbenv init -)"

### P Y T H O N
# pip should only run if there is a virtualenv currently activated
export PIP_REQUIRE_VIRTUALENV=true

export PIP_REQUIRE_VENV=true

# cache pip-installed packages to avoid re-downloading
export PIP_DOWNLOAD_CACHE=$HOME/.pip/cache

# syspip overrides the "run if there is a virtualenv currently activated" restriction
syspip(){
	PIP_REQUIRE_VIRTUALENV="" pip "$@"
}


#--------------------------------------------------------------------------#

# A L I A S E S

#--------------------------------------------------------------------------#
# Load external aliases
if [[ -s "$HOME/.bash/aliases" ]]; then
	source "$HOME/.bash/aliases"
fi


#--------------------------------------------------------------------------#

# F U N C T I O N S

#--------------------------------------------------------------------------#
# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$@"
}

# List directory content and output in a file whose name is formated as "[Folder Name]-LIST.txt"
function fcl() {
	ls -p "$@" > "$@-LIST.txt"
}


#--------------------------------------------------------------------------#

# B A S H    P R O M P T    C U S T O M I Z A T I O N

#--------------------------------------------------------------------------#
# Set the terminal title to the current working directory
PS1="\[\033]0;\w\007\]"

default_username='vivien'

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM=xterm-256color
fi

if tput setaf 1 &> /dev/null; then
	tput sgr0
	if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
		MAGENTA=$(tput setaf 9)
		ORANGE=$(tput setaf 172)
		GREEN=$(tput setaf 190) #190
		PURPLE=$(tput setaf 141)
		WHITE=$(tput setaf 256)
	else
		MAGENTA=$(tput setaf 5)
		ORANGE=$(tput setaf 4)
		GREEN=$(tput setaf 2)
		PURPLE=$(tput setaf 1)
		WHITE=$(tput setaf 7)
	fi
	BOLD=""
	RESET=$(tput sgr0)
else
	MAGENTA="\033[1;31m"
	ORANGE="\033[1;33m"
	GREEN="\033[1;32m"
	PURPLE="\033[1;35m"
	WHITE="\033[1;37m"
	BOLD=""
	RESET="\033[m"
fi


function git_info() {
	# check if we're in a git repo
	git rev-parse --is-inside-work-tree &>/dev/null || return

	# quickest check for what branch we're on
	branch=$(git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||')

	# check if it's dirty (via github.com/sindresorhus/pure)
	dirty=$(git diff --quiet --ignore-submodules HEAD &>/dev/null; [ $? -eq 1 ]&& echo -e "*")

	echo $WHITE" on "$PURPLE$branch$dirty
}

# Only show username/host if not default
function usernamehost() {
if [ $USER != $default_username ]; then echo "${MAGENTA}$USER ${WHITE}at ${ORANGE}$HOSTNAME $WHITEin "; fi
}

PS1="\[\e]2;$PWD\[\a\]\[\e]1;\]$(basename "$(dirname "$PWD")")/\W\[\a\]${BOLD}\$(usernamehost)\[$GREEN\]\w\$(git_info)\[$WHITE\]\n\$ \[$RESET\]"